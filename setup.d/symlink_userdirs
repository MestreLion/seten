#!/usr/bin/env bash
# Copyright (C) 2021 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
# License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
# -----------------------------------------------------------------------------

DESCRIPTION='Move special user dirs, replacing with symlinks to data partition'
ARGS='[TARGET_BASEDIR]'

setuplib=${SETUP_LIB_PATH:-"$(dirname "$(readlink -f "$0")")"/../setuplib}
# shellcheck source=../setuplib
if [[ -r "$setuplib" ]]; then source "$setuplib"; else
	echo "Setup library not found: $setuplib" >&2; exit 1;
fi

# -----------------------------------------------------------------------------

basedir=${1:-${SETUP_USERDIRS_TARGET:-}}

if ! [[ -v SETUP_USERDIRS_OVERRIDES[@] ]]; then declare -gA SETUP_USERDIRS_OVERRIDES=(); fi
if ! [[ -v SETUP_USERDIRS_HIDE ]]; then SETUP_USERDIRS_HIDE=(TEMPLATES PUBLICSHARE); fi

# -----------------------------------------------------------------------------


merge_dirs() {
	local tag=$1
	local source; source=$(xdg-user-dir "$tag")
	local rsync_opts=()
	# Skip if it does not exist, or already a symlink, or set to $HOME
	if [[ ! -e "$source" || -h "$source" || "$source" == "$HOME" ]]; then
		return
	fi
	local old=${source}.${SETUP_SLUG}.$(now).old  # almost the same as $(bakfile)
	local target; target=$(
		cd "$HOME" &&
		realpath --canonicalize-missing --relative-base "$HOME" -- \
			"${SETUP_USERDIRS_OVERRIDES[$tag]:-$source}"
	)
	if ! [[ "${target:0:1}" == '/' ]]; then
		target=${basedir%/}/${target}
	fi
	if [[ "$target" == "$source" ]]; then
		return
	fi
	message "Move content and symlink: $source	->	$target"
	setup_run mkdir -p -- "$target"
	if ! [[ "$(df --output=fstype "$target" | tail -n -1)" == ext4 ]]; then
		# Disable permission setting for non-EXT4 partitions (FAT/NTFS/etc)
		rsync_opts+=(--no-p --no-g --omit-dir-times)
	fi
	setup_run rsync -qaSh "${rsync_opts[@]}" --progress --remove-source-files -- \
		"${source%/}/" "${target%/}/"
	setup_run find "$source" -type d -empty -delete
	if [[ -e "$source" ]]; then
		mv -- "$source" "$old"
	fi
	setup_run ln -s -- "$target" "$source"
}
if [[ "$basedir" ]]; then
	for tag in DOCUMENTS DOWNLOAD MUSIC PICTURES VIDEOS; do
		merge_dirs "$tag"
	done
fi

# Hide templates, publicshare, examples
declare -A created
hide_path() {
	local path=$1
	local path_file; path_file=$(basename -- "$path")
	local path_dir;  path_dir=$( dirname  -- "$path")
	local hidden=${path_dir}/.hidden
	if [[ -e "$path" ]] && ! grep -qF "$path_file" "$hidden" 2>/dev/null; then
		message "Hide $(basename "$path")"
		if ! [[ -e "$hidden" ]]; then
			created["$hidden"]=1
		fi
		if ! [[ "${created["$hidden"]:-}" ]]; then
			backup_file "$hidden"
		fi
		echo "$path_file" | setup_run tee -a "$hidden"
	fi
}
for tag in "${SETUP_USERDIRS_HIDE[@]}"; do
	path=$(xdg-user-dir "$tag")
	if [[ "$path" == "$HOME" ]]; then
		continue
	fi
	hide_path "$path"
done

paths=(
	"$HOME/examples.desktop"  # Not in Ubuntu 20.04 anymore
	"$HOME/snap"
	"$basedir/\$RECYCLE.BIN"
	"$basedir/System Volume Information"
)
for path in "${paths[@]}"; do
	hide_path "$path"
done
